digraph lparser {
//rankdir=LR; //TB

node[fontname="PMingLiu"]
edge[fontname="PMingLiu"]

//顺序是反过来的，因为要避免提前声明

//chunk块递归规则
"luaY_parser" -> "chunk"  [color="#ff0000"]
"body" -> "chunk"  [color="#ff0000"]
"block" -> "chunk"  [color="#ff0000"]
"repeatstat" -> "chunk"  [color="#ff0000"]
"chunk" -> "statement"  [color="#ff0000"]
"statement" -> "retstat"  [color="#ff0000"]
"statement" -> "exprstat"  [color="#ff0000"]
"statement" -> "funcstat"  [color="#ff0000"]
"funcstat" -> "funcname"  [color="#ff0000"]
"statement" -> "localstat"  [color="#ff0000"]
"statement" -> "localfunc"  [color="#ff0000"]
"statement" -> "ifstat"  [color="#ff0000"]
"ifstat" -> "test_then_block"  [color="#ff0000"]
"statement" -> "forstat"  [color="#ff0000"]
"forstat" -> "forlist"  [color="#ff0000"]
"forstat" -> "fornum"  [color="#ff0000"]
"fornum" -> "forbody"  [color="#ff0000"]
"forlist" -> "forbody"  [color="#ff0000"]
"fornum" -> "exp1"  [color="#ff0000"]
"statement" -> "repeatstat"  [color="#ff0000"]
"statement" -> "whilestat"  [color="#ff0000"]
"repeatstat" -> "breakstat"  [color="#ff0000"]
"statement" -> "breakstat"  [color="#ff0000"]
"whilestat" -> "cond"  [color="#ff0000"]
"repeatstat" -> "cond"  [color="#ff0000"]
"test_then_block" -> "cond"  [color="#ff0000"]
"assignment" -> "assignment"  [color="#ff0000"]
"exprstat" -> "assignment"  [color="#ff0000"]
"assignment" -> "check_conflict"  [color="#ff0000"]
"whilestat" -> "block"  [color="#ff0000"]
"forbody" -> "block"  [color="#ff0000"]
"test_then_block" -> "block"  [color="#ff0000"]
"ifstat" -> "block"  [color="#ff0000"]
"statement" -> "block"  [color="#ff0000"]
"retstat" -> "block_follow"  [color="#ff0000"]
"chunk" -> "block_follow"  [color="#ff0000"]

//表达式递归规则
"yindex" -> "expr"  [color="#00ff00"]
"recfield" -> "expr"  [color="#00ff00"]
"listfield" -> "expr"  [color="#00ff00"]
"explist1" -> "expr"  [color="#00ff00"]
"prefixexp" -> "expr"  [color="#00ff00"]
"cond" -> "expr"  [color="#00ff00"]
"exp1" -> "expr"  [color="#00ff00"]
"subexpr" -> "subexpr"  [color="#00ff00"]
"expr" -> "subexpr"  [color="#00ff00"]
"subexpr" -> "getbinopr"  [color="#00ff00"]
"subexpr" -> "getunopr"  [color="#00ff00"]
"subexpr" -> "simpleexp"  [color="#00ff00"]
"simpleexp" -> "primaryexp"  [color="#00ff00"]
"assignment" -> "primaryexp"  [color="#00ff00"]
"exprstat" -> "primaryexp"  [color="#00ff00"]
"primaryexp" -> "prefixexp"  [color="#00ff00"]


"primaryexp" -> "funcargs"  [color="#0000ff"]
"funcargs" -> "explist1"  [color="#0000ff"]
"assignment" -> "explist1"  [color="#0000ff"]
"forlist" -> "explist1"  [color="#0000ff"]
"localstat" -> "explist1"  [color="#0000ff"]
"retstat" -> "explist1"  [color="#0000ff"]
"simpleexp" -> "body"  [color="#0000ff"]
"localfunc" -> "body"  [color="#0000ff"]
"funcstat" -> "body"  [color="#0000ff"]
"body" -> "parlist"  [color="#0000ff"]

"funcargs" -> "constructor"  [color="#0000ff"]
"simpleexp" -> "constructor"  [color="#0000ff"]
"constructor" -> "listfield"  [color="#0000ff"]
"constructor" -> "lastlistfield"  [color="#0000ff"]
"constructor" -> "closelistfield"  [color="#0000ff"]
"constructor" -> "recfield"  [color="#0000ff"]

"recfield" -> "yindex"  [color="#0000ff"]
"primaryexp" -> "yindex"  [color="#0000ff"]
"primaryexp" -> "field"  [color="#0000ff"]
"funcname" -> "field"  [color="#0000ff"]
}
