digraph lparser_all {
rankdir=LR; //TB

node[fontname="PMingLiu"]
edge[fontname="PMingLiu"]

//顺序是反过来的，因为要避免提前声明

//chunk块递归规则
"luaY_parser" -> "chunk"  [color="#ff0000"]
"body" -> "chunk"  [color="#ff0000"]
"block" -> "chunk"  [color="#ff0000"]
"repeatstat" -> "chunk"  [color="#ff0000"]
"chunk" -> "statement"  [color="#ff0000"]
"statement" -> "retstat"  [color="#ff0000"]
"statement" -> "exprstat"  [color="#ff0000"]
"statement" -> "funcstat"  [color="#ff0000"]
"funcstat" -> "funcname"  [color="#ff0000"]
"statement" -> "localstat"  [color="#ff0000"]
"statement" -> "localfunc"  [color="#ff0000"]
"statement" -> "ifstat"  [color="#ff0000"]
"ifstat" -> "test_then_block"  [color="#ff0000"]
"statement" -> "forstat"  [color="#ff0000"]
"forstat" -> "forlist"  [color="#ff0000"]
"forstat" -> "fornum"  [color="#ff0000"]
"fornum" -> "forbody"  [color="#ff0000"]
"forlist" -> "forbody"  [color="#ff0000"]
"fornum" -> "exp1"  [color="#ff0000"]
"statement" -> "repeatstat"  [color="#ff0000"]
"statement" -> "whilestat"  [color="#ff0000"]
"repeatstat" -> "breakstat"  [color="#ff0000"]
"statement" -> "breakstat"  [color="#ff0000"]
"whilestat" -> "cond"  [color="#ff0000"]
"repeatstat" -> "cond"  [color="#ff0000"]
"test_then_block" -> "cond"  [color="#ff0000"]
"assignment" -> "assignment"  [color="#ff0000"]
"exprstat" -> "assignment"  [color="#ff0000"]
"assignment" -> "check_conflict"  [color="#ff0000"]
"whilestat" -> "block"  [color="#ff0000"]
"forbody" -> "block"  [color="#ff0000"]
"test_then_block" -> "block"  [color="#ff0000"]
"ifstat" -> "block"  [color="#ff0000"]
"statement" -> "block"  [color="#ff0000"]
"retstat" -> "block_follow"  [color="#ff0000"]
"chunk" -> "block_follow"  [color="#ff0000"]

//表达式递归规则
"yindex" -> "expr"  [color="#00ff00"]
"recfield" -> "expr"  [color="#00ff00"]
"listfield" -> "expr"  [color="#00ff00"]
"explist1" -> "expr"  [color="#00ff00"]
"prefixexp" -> "expr"  [color="#00ff00"]
"cond" -> "expr"  [color="#00ff00"]
"exp1" -> "expr"  [color="#00ff00"]
"subexpr" -> "subexpr"  [color="#00ff00"]
"expr" -> "subexpr"  [color="#00ff00"]
"subexpr" -> "getbinopr"  [color="#00ff00"]
"subexpr" -> "getunopr"  [color="#00ff00"]
"subexpr" -> "simpleexp"  [color="#00ff00"]
"simpleexp" -> "primaryexp"  [color="#00ff00"]
"assignment" -> "primaryexp"  [color="#00ff00"]
"exprstat" -> "primaryexp"  [color="#00ff00"]
"primaryexp" -> "prefixexp"  [color="#00ff00"]


"primaryexp" -> "funcargs"  [color="#0000ff"]
"funcargs" -> "explist1"  [color="#0000ff"]
"assignment" -> "explist1"  [color="#0000ff"]
"forlist" -> "explist1"  [color="#0000ff"]
"localstat" -> "explist1"  [color="#0000ff"]
"retstat" -> "explist1"  [color="#0000ff"]
"simpleexp" -> "body"  [color="#0000ff"]
"localfunc" -> "body"  [color="#0000ff"]
"funcstat" -> "body"  [color="#0000ff"]
"body" -> "parlist"  [color="#0000ff"]

"funcargs" -> "constructor"  [color="#0000ff"]
"simpleexp" -> "constructor"  [color="#0000ff"]
"constructor" -> "listfield"  [color="#0000ff"]
"constructor" -> "lastlistfield"  [color="#0000ff"]
"constructor" -> "closelistfield"  [color="#0000ff"]
"constructor" -> "recfield"  [color="#0000ff"]

"recfield" -> "yindex"  [color="#0000ff"]
"primaryexp" -> "yindex"  [color="#0000ff"]
"primaryexp" -> "field"  [color="#0000ff"]
"funcname" -> "field"  [color="#0000ff"]

"luaY_parser" -> "close_func"
"body" -> "close_func"
"luaY_parser" -> "open_func"
"body" -> "open_func"
"body" -> "pushclosure"
"block" -> "leaveblock"
"whilestat" -> "leaveblock"
"repeatstat" -> "leaveblock"
"forbody" -> "leaveblock"
"forstat" -> "leaveblock"
"block" -> "enterblock"
"whilestat" -> "enterblock"
"repeatstat" -> "enterblock"
"forbody" -> "enterblock"
"forstat" -> "enterblock"
"subexpr" -> "enterlevel"
"chunk" -> "enterlevel"
"subexpr" -> "leavelevel"
"chunk" -> "leavelevel"
"assignment" -> "adjust_assign"
"forlist" -> "adjust_assign"
"localstat" -> "adjust_assign"
"prefixexp" -> "singlevar"
"funcname" -> "singlevar"
"singlevaraux" -> "singlevaraux"
"singlevar" -> "singlevaraux"
"singlevaraux" -> "markupval"
"singlevaraux" -> "searchvar"
"singlevaraux" -> "indexupvalue"
"leaveblock" -> "removevars"
"close_func" -> "removevars"
"parlist" -> "adjustlocalvars"
"body" -> "adjustlocalvars"
"forbody" -> "adjustlocalvars"
"localfunc" -> "adjustlocalvars"
"localstat" -> "adjustlocalvars"
"new_localvarliteral" -> "new_localvar"
"parlist" -> "new_localvar"
"fornum" -> "new_localvar"
"forlist" -> "new_localvar"
"localfunc" -> "new_localvar"
"localstat" -> "new_localvar"
"parlist" -> "new_localvarliteral"
"body" -> "new_localvarliteral"
"fornum" -> "new_localvarliteral"
"forlist" -> "new_localvarliteral"
"new_localvar" -> "registerlocalvar"
"field" -> "checkname"
"recfield" -> "checkname"
"primaryexp" -> "checkname"
"checkname" -> "codestring"
"funcargs" -> "codestring"
"simpleexp" -> "codestring"
"codestring" -> "init_exp"
"singlevaraux" -> "init_exp"
"pushclosure" -> "init_exp"
"constructor" -> "init_exp"
"funcargs" -> "init_exp"
"simpleexp" -> "init_exp"
"assignment" -> "init_exp"
"localfunc" -> "init_exp"
"checkname" -> "str_checkname"
"singlevar" -> "str_checkname"
"parlist" -> "str_checkname"
"forlist" -> "str_checkname"
"forstat" -> "str_checkname"
"localfunc" -> "str_checkname"
"localstat" -> "str_checkname"
"constructor" -> "check_match"
"body" -> "check_match"
"funcargs" -> "check_match"
"prefixexp" -> "check_match"
"whilestat" -> "check_match"
"repeatstat" -> "check_match"
"forstat" -> "check_match"
"ifstat" -> "check_match"
"statement" -> "check_match"
"simpleexp" -> "check_condition"
"assignment" -> "check_condition"
"yindex" -> "checknext"
"recfield" -> "checknext"
"constructor" -> "checknext"
"body" -> "checknext"
"assignment" -> "checknext"
"whilestat" -> "checknext"
"forbody" -> "checknext"
"fornum" -> "checknext"
"forlist" -> "checknext"
"test_then_block" -> "checknext"
"checknext" -> "check"
"str_checkname" -> "check"
"luaY_parser" -> "check"
"check_match" -> "testnext"
"constructor" -> "testnext"
"parlist" -> "testnext"
"explist1" -> "testnext"
"assignment" -> "testnext"
"fornum" -> "testnext"
"forlist" -> "testnext"
"localstat" -> "testnext"
"statement" -> "testnext"
"chunk" -> "testnext"
"luaY_checklimit" -> "errorlimit"
"check" -> "error_expected"
"check_match" -> "error_expected"
"close_func" -> "anchor_token"

"new_localvar" -> "luaY_checklimit"
"indexupvalue" -> "luaY_checklimit"
"recfield" -> "luaY_checklimit"
"listfield" -> "luaY_checklimit"
"assignment" -> "luaY_checklimit"
"adjustlocalvars" -> "getlocvar"
"removevars" -> "getlocvar"
"searchvar" -> "getlocvar"
"localfunc" -> "getlocvar"
"adjust_assign" -> "hasmultret"
"lastlistfield" -> "hasmultret"
"funcargs" -> "hasmultret"
"retstat" -> "hasmultret"

}
